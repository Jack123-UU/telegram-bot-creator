# TeleBot Platform - Kubernetes Deployment with Security
# This file contains the production-ready Kubernetes manifests with security best practices

apiVersion: v1
kind: Namespace
metadata:
  name: telebot-platform
  labels:
    name: telebot-platform
    security.telebot.com/tier: production
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telebot-sa
  namespace: telebot-platform
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "telebot-role"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: telebot-platform
  name: telebot-role
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: telebot-rolebinding
  namespace: telebot-platform
subjects:
- kind: ServiceAccount
  name: telebot-sa
  namespace: telebot-platform
roleRef:
  kind: Role
  name: telebot-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telebot-config
  namespace: telebot-platform
data:
  environment: "production"
  log_level: "INFO"
  api_port: "8000"
  metrics_port: "9090"
  health_port: "8080"
  enable_docs: "false"
  rate_limit_per_minute: "100"
  payment_timeout_minutes: "15"
  max_upload_size: "104857600"
  cache_ttl: "3600"
  session_timeout: "900"
  worker_processes: "4"
  db_pool_size: "20"
  redis_pool_size: "20"
  backup_enabled: "true"
  audit_enabled: "true"
  gdpr_enabled: "true"
  analytics_enabled: "true"
  allowed_origins: "https://telebot.yourdomain.com,https://admin.yourdomain.com"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telebot-api
  namespace: telebot-platform
  labels:
    app: telebot-api
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: telebot-api
  template:
    metadata:
      labels:
        app: telebot-api
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: telebot-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: telebot-api
        image: telebot/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        - containerPort: 8080
          name: health
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: telebot-config
              key: environment
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: telebot-config
              key: log_level
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: telebot-config
              key: api_port
        - name: BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: telebot-bot-secrets
              key: BOT_TOKEN
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: telebot-database-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: telebot-database-secrets
              key: REDIS_URL
        - name: INTERNAL_TOKEN
          valueFrom:
            secretKeyRef:
              name: telebot-api-secrets
              key: INTERNAL_TOKEN
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: telebot-api-secrets
              key: JWT_SECRET_KEY
        - name: AES_KEY
          valueFrom:
            secretKeyRef:
              name: telebot-api-secrets
              key: AES_KEY
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: uploads
        persistentVolumeClaim:
          claimName: telebot-uploads-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telebot-bot
  namespace: telebot-platform
  labels:
    app: telebot-bot
    component: bot
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: telebot-bot
  template:
    metadata:
      labels:
        app: telebot-bot
        component: bot
    spec:
      serviceAccountName: telebot-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: telebot-bot
        image: telebot/bot:latest
        imagePullPolicy: Always
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: telebot-config
              key: environment
        - name: BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: telebot-bot-secrets
              key: BOT_TOKEN
        - name: WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: telebot-bot-secrets
              key: WEBHOOK_SECRET
        - name: API_BASE_URL
          value: "http://telebot-api:8000"
        - name: INTERNAL_TOKEN
          valueFrom:
            secretKeyRef:
              name: telebot-api-secrets
              key: INTERNAL_TOKEN
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import requests; requests.get('http://localhost:8080/health').raise_for_status()"
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import requests; requests.get('http://localhost:8080/health/ready').raise_for_status()"
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telebot-payment-monitor
  namespace: telebot-platform
  labels:
    app: telebot-payment-monitor
    component: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telebot-payment-monitor
  template:
    metadata:
      labels:
        app: telebot-payment-monitor
        component: payment
    spec:
      serviceAccountName: telebot-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: payment-monitor
        image: telebot/payment-monitor:latest
        imagePullPolicy: Always
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: telebot-config
              key: environment
        - name: TRON_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: telebot-payment-secrets
              key: TRON_PRIVATE_KEY
        - name: TRON_ADDRESS
          valueFrom:
            secretKeyRef:
              name: telebot-payment-secrets
              key: TRON_ADDRESS
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: telebot-database-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: telebot-database-secrets
              key: REDIS_URL
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: telebot-api
  namespace: telebot-platform
  labels:
    app: telebot-api
spec:
  selector:
    app: telebot-api
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: telebot-uploads-pvc
  namespace: telebot-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: telebot-network-policy
  namespace: telebot-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from:
    - podSelector:
        matchLabels:
          app: telebot-api
    - podSelector:
        matchLabels:
          app: telebot-bot
    - podSelector:
        matchLabels:
          app: telebot-payment-monitor
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: telebot-ingress
  namespace: telebot-platform
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
spec:
  tls:
  - hosts:
    - telebot.yourdomain.com
    - api.telebot.yourdomain.com
    secretName: telebot-tls
  rules:
  - host: telebot.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: telebot-api
            port:
              number: 8000
  - host: api.telebot.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: telebot-api
            port:
              number: 8000
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: telebot-api-pdb
  namespace: telebot-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: telebot-api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: telebot-api-hpa
  namespace: telebot-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: telebot-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80