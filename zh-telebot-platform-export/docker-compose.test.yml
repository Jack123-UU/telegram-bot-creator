version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telebot_postgres
    environment:
      POSTGRES_USER: telebot
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: telebot_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telebot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: telebot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vault for Secrets Management
  vault:
    image: vault:1.15
    container_name: telebot_vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
    command: vault server -dev -dev-listen-address=0.0.0.0:8200
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telebot_backend
    environment:
      - DATABASE_URL=postgresql://telebot:dev_password@postgres:5432/telebot_db
      - REDIS_URL=redis://redis:6379/0
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-root-token
      - BOT_TOKEN=8424135673:AAE-QYrIeZ5kgI3VRu1C5gd23CYnQsmjUmk
      - TRON_NETWORK=shasta
      - TRON_API_URL=https://api.shasta.trongrid.io
      - PAYMENT_ADDRESS=TTestPaymentAddress123456789012345678
      - JWT_SECRET=dev-jwt-secret-key
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot Service
  telebot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: telebot_service
    environment:
      - BOT_TOKEN=8424135673:AAE-QYrIeZ5kgI3VRu1C5gd23CYnQsmjUmk
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379/1
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-root-token
      - WEBHOOK_URL=https://your-domain.com/webhook
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./bot:/app
      - /app/node_modules
    restart: unless-stopped

  # Payment Monitor Service
  payment-monitor:
    build:
      context: ./payment-monitor
      dockerfile: Dockerfile
    container_name: telebot_payment_monitor
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379/2
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=dev-root-token
      - TRON_NETWORK=shasta
      - TRON_API_URL=https://api.shasta.trongrid.io
      - PAYMENT_ADDRESS=TTestPaymentAddress123456789012345678
      - PRIVATE_KEY_PATH=/vault/secrets/tron_private_key
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./payment-monitor:/app
      - /app/node_modules
    restart: unless-stopped

  # Web Admin Panel
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: telebot_admin
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./admin-panel:/app
      - /app/node_modules

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: telebot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - admin-panel
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  vault_data:

networks:
  default:
    name: telebot_network